stages:
  - prepare
  - build
  - release

variables:
  REGISTRY: "$CI_REGISTRY"
  IMAGE_NAME: "$CI_PROJECT_PATH"

default:
  image: docker:latest
  services:
    - docker:dind

before_script:
  - apk add --no-cache curl jq nodejs npm git

# Job 1: Prepare Environment
prepare:
  stage: prepare
  script:
    - echo "Preparing environment"
    - calculatedSha=$(git rev-parse --short $CI_COMMIT_SHA)
    - echo "short_sha=$calculatedSha" >> vars.env
    - export SHORT_SHA=$calculatedSha
  artifacts:
    reports:
      dotenv: vars.env

# Job 2: Setup Semantic Release and Run Dry-Run
semantic_release_prep:
  stage: prepare
  image: gitlab.tikalk.dev:5050/tikalk/engineering/bootstrap/tools/main:latest
  script:
    - npm install -g semantic-release
    - npm install -g @semantic-release/git @semantic-release/github @semantic-release/changelog @semantic-release/commit-analyzer @semantic-release/release-notes-generator @semantic-release/exec
    - |
      cat <<EOF > .releaserc.yml
      branches:
        - main
        - name: dev
          prerelease: true
      plugins:
        - "@semantic-release/commit-analyzer"
        - "@semantic-release/release-notes-generator"
        - "@semantic-release/git"
        - "@semantic-release/github"
        - - "@semantic-release/exec"
          - verifyReleaseCmd: echo \${nextRelease.version} > nextVersion
      EOF
    - semantic-release --dry-run
    - if [ -f nextVersion ]; then echo "SRTAG=v$(cat nextVersion)" >> vars.env; else echo "SRTAG=$SHORT_SHA" >> vars.env; fi
  artifacts:
    reports:
      dotenv: vars.env

# Job 3: Build and Push Docker Image
build_and_push:
  stage: build
  script:
    - echo $CI_JOB_TOKEN | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker buildx create --use
    - docker buildx inspect --bootstrap
    - |
      docker buildx build --platform linux/amd64,linux/arm64 \
        --build-arg SRTAG=$SRTAG \
        --tag $REGISTRY/$IMAGE_NAME:latest \
        --tag $REGISTRY/$IMAGE_NAME:latest-$CI_COMMIT_REF_NAME \
        --tag $REGISTRY/$IMAGE_NAME:$SRTAG \
        --push .
  only:
    refs:
      - branches

# Job 4: Final Semantic Release
semantic_release:
  stage: release
  script:
    - npm install -g semantic-release
    - semantic-release
  only:
    refs:
      - branches
  dependencies:
    - build_and_push
